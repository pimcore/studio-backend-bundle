clone_asset_created_response: Successfully copied parent asset and created <strong>jobRun</strong>
  for copying child assets
clone_asset_description: |
  Clones a specific asset with the given <strong>{id}</strong>. <br> The <strong>{parentId}</strong> must be a folder
clone_asset_success_response: Successfully copied asset
clone_asset_summary: Clone a specific asset
clone_data_object_created_response: Successfully copied parent data object and created
  <strong>jobRun</strong> for copying child objects
clone_data_object_description: |
  Clones a specific data object with the given <strong>{id}</strong>. <br> The <strong>{parentId}</strong> must be a folder or another data object
clone_data_object_success_response: Successfully copied data object
clone_data_object_summary: Clone a specific data object
create_csv_assets_created_response: Successfully created <strong>jobRun</strong> for
  csv export
create_csv_assets_description: |
  Creating the CSV file for assets. <br> Parameters are: <ul>
    <li><strong>assets</strong>: Array of asset ids</li>
    <li><strong>gridConfig</strong>: Describes the columns that should be exported. Can be obtained via the grid endpoint</li>
    <li><strong>settings</strong>: Delimiter and header options</li>
  </ul> Delimiter can be set to anything, but the default is a <strong>semicolon</strong> <br> Header options are: <strong>no_header</strong>, <strong>title</strong> and <strong>name</strong><br>
  Download has to be triggered separately via the csv download route with the <strong>{jobRunId}</strong> returned in the response
create_csv_assets_summary: Creating CSV file for assets
delete_element_created_response: Successfully created jobRun for deleting element
  and its children
delete_element_description: |
  Deletes a specific element based on the given <strong>{elementType}</strong> and <strong>{id}</strong>. <br> The <strong>{id}</strong> must be an existing element of the provided <strong>{elementType}</strong>. <br> If element is a folder, all child elements will be deleted as well. Elements are moved into the Recycle Bin before deletion.
delete_element_success_response: Successfully deleted element
delete_element_summary: Delete a specific element and its children
download_assets_csv_description: |
  Download the CSV file with given <strong>{jobRunId}</strong> returned in the response of the create csv endpoint
download_assets_csv_success_response: CSV File as attachment
download_assets_csv_summary: Download CSV file for assets
patch_asset_by_id_created_response: Successfully created jobRun for patching multiple
  assets
patch_asset_by_id_description: |
  Patching assets based on the given ID and data. <br> Patching can be used for updating single or multiple fields. <br> If single element is being patched, operation is executed synchronously. Multiple elements are patched asynchronously.
patch_asset_by_id_success_response: Successfully patched asset
patch_asset_by_id_summary: Patch assets by ID
patch_data_object_by_id_created_response: Successfully created jobRun for patching
  multiple data objects
patch_data_object_by_id_description: |
  Patching data objects based on the given ID and data. <br> Patching can be used for updating single or multiple fields. <br> If single element is being patched, operation is executed synchronously. Multiple elements are patched asynchronously.
patch_data_object_by_id_success_response: Successfully patched data object
patch_data_object_by_id_summary: Patch data objects by ID
tag_asset_thumbnail_description: List thumbnails for assets like videos and images
tag_assets_description: Asset operations to get/update/create/delete assets
tag_authorization_description: Session-based login via username and password or logout
  and invalidate the session
tag_dataobjects_description: DataObject operations to get/update/create/delete data
  objects
tag_dependencies_description: Get dependencies for a single element
tag_elements_description: Get element properties for a single element based on its
  type and provided parameters
tag_emails_description: Email operations to get/update/create/delete/test emails and
  email blocklist
tag_execution_engine_description: Execution engine operations related to job runs
tag_grid_description: Grid operations
tag_mercure_description: Retrieve JWT token for Mercure hub as cookie
tag_notes_description: Note operations to list/delete notes
tag_properties_description: Property operations to get/update/create/delete properties
tag_role_description: Role Management operations
tag_schedule_description: Get schedules for an element
tag_settings_description: Get System Settings
tag_tags_description: Tag operations to get/list/create/update/delete tags
tag_tags_for_element_description: Tag operations to get tags for an element
tag_translation_description: Get translations either for a single key or multiple
  keys
tag_user_description: User Management operations
tag_versions_description: Versions operations to get/list/publish/delete and cleanup
  versions
tag_workflows_description: Workflows operations to get element workflow details
update_asset_by_id_description: |
  Update needs to have the complete data present. <br> You can create/update/delete list entries like metadata, custom settings and properties. <br>  E.g. if you want to remove an entry from metadata simply do not include this entry in the update. <br>  If you want to update only a single field, use the PATCH method.
update_asset_by_id_summary: Update an asset by ID
update_data_object_by_id_description: |
  Update needs to have the complete data present. <br> You can create/update/delete list entries like properties. <br>  If you want to update only a single field, use the PATCH method.
update_data_object_by_id_summary: Update a data object by ID
update_data_object_success_response: Successfully updated data object
clone_user_summary: Clone a specific user.
clone_user_success_response: Node of the cloned user.
create_user_summary: Create a new user.
create_user_success_response: Node of the new created User.
create_user_folder_summary: Create a new user folder.
create_user_folder_success_response: Node of the new created Folder.
current_user_summary: Retrieve information's about the current logged in user.
current_user_success_response: Current user information's.
delete_user_summary: Delete a specific user.
delete_user_folder_summary: Delete a specific user folder with all users in this folder.
get_user_summary: Retrieve a specific user by ID.
get_user_success_response: Node of the requested user.
get_available_user_permissions_summary: Get all available user permissions.
get_available_user_permissions_success_response: List of available user permissions.
reset_user_password_summary: Sending username to reset password.
update_user_password_summary: Update password for a User by the User id.
update_user_summary: Update user by id.
update_user_success_response: Updated data.
user_tree_summary: Get collection of users for tree view.
user_tree_success_response: Collection of users including folders for the given parent id.
clone_role_summary: Clone a specific Role.
clone_role_success_response: Node of the cloned Role.
role_folder_create_summary: Create a new role folder.
role_folder_create_success_response: Node of the new created Folder
create_role_summary: Create a new role.
create_role_success_response: Node of the new created Role.
delete_role_folder_summary: Delete a specific folder with all sub roles.
delete_role_summary: Delete a specific role.
get_role_summary: Get role by id.
get_role_success_response: Role data.
get_roles_summary: Get all available user roles.
get_roles_success_response: List of available user roles.
get_role_tree_node_summary: Get collection of roles for tree view.
get_role_tree_node_success_response: Collection of roles including folders for the given parent id.
update_role_summary: Update role by id.
update_role_success_response: Updated data.