asset_clone_created_response: Successfully copied parent asset and created <strong>jobRun</strong>
  for copying child assets
asset_clone_description: |
  Clones a specific asset with the given <strong>{id}</strong>. <br> The <strong>{parentId}</strong> must be a folder
asset_clone_success_response: Successfully copied asset
asset_clone_summary: Clone a specific asset
asset_create_csv_created_response: Successfully created <strong>jobRun</strong> for
  csv export
asset_create_csv_description: |
  Creating the CSV file for assets. <br> Parameters are: <ul>
    <li><strong>assets</strong>: Array of asset ids</li>
    <li><strong>gridConfig</strong>: Describes the columns that should be exported. Can be obtained via the grid endpoint</li>
    <li><strong>settings</strong>: Delimiter and header options</li>
  </ul> Delimiter can be set to anything, but the default is a <strong>semicolon</strong> <br> Header options are: <strong>no_header</strong>, <strong>title</strong> and <strong>name</strong><br>
  Download has to be triggered separately via the csv download route with the <strong>{jobRunId}</strong> returned in the response
asset_create_csv_summary: Creating CSV file for assets
asset_download_csv_description: |
  Download the CSV file with given <strong>{jobRunId}</strong> returned in the response of the create csv endpoint
asset_download_csv_success_response: CSV File as attachment
asset_download_csv_summary: Download CSV file for assets
asset_patch_by_id_created_response: Successfully created jobRun for patching multiple
  assets
asset_patch_by_id_description: |
  Patching assets based on the given ID and data. <br> Patching can be used for updating single or multiple fields. <br> If single element is being patched, operation is executed synchronously. Multiple elements are patched asynchronously.
asset_patch_by_id_success_response: Successfully patched asset
asset_patch_by_id_summary: Patch assets by ID
asset_update_by_id_description: |
  Update needs to have the complete data present. <br> You can create/update/delete list entries like metadata, custom settings and properties. <br>  E.g. if you want to remove an entry from metadata simply do not include this entry in the update. <br>  If you want to update only a single field, use the PATCH method.
asset_update_by_id_summary: Update an asset by ID
data_object_add_description: |
  Add a new data object to the given <strong>{parentId}</strong>. <br> The <strong>{parentId}</strong> must be an ID of a folder or another data object. See the full description of request fields with the schema <strong>DataObjectAdd</strong>
data_object_add_success_response: ID of added data object
data_object_add_summary: Successfully added a new data object
data_object_clone_created_response: Successfully copied parent data object and created
  <strong>jobRun</strong> for copying child objects
data_object_clone_description: |
  Clones a specific data object with the given <strong>{id}</strong>. <br> The <strong>{parentId}</strong> must be a folder or another data object
data_object_clone_success_response: Successfully copied data object
data_object_clone_summary: Clone a specific data object
data_object_get_by_id_description: |
  Retrieves a specific data object based on the given <strong>{id}</strong>. <br> The <strong>{id}</strong> must be an ID of existing data object or folder.
data_object_get_by_id_success_response: Successfully retrieved data object data as JSON
data_object_get_by_id_summary: Get a specific data object by ID
data_object_get_tree_description: |
  Listing of all data objects and data object folders in the system. <br>
  Returns only data which are relevant for the tree <br>
  You can use different query parameters to filter the data objects and it is possible to exclude folders from the result completely
data_object_get_tree_success_response: Paginated data objects with total count as header param as JSON
data_object_get_tree_summary: Get all data object data for the tree
data_object_patch_by_id_created_response: Successfully created jobRun for patching
  multiple data objects
data_object_patch_by_id_description: |
  Patching data objects based on the given ID and data. <br> Patching can be used for updating single or multiple fields. <br> If single element is being patched, operation is executed synchronously. Multiple elements are patched asynchronously.
data_object_patch_by_id_success_response: Successfully patched data object
data_object_patch_by_id_summary: Patch data objects by ID
data_object_replace_content_description: |
    Replace the content of the data object with the given <strong>{targetId}</strong> with the content of the data object matching the <strong>{sourceId}</strong>. <br> The <strong>{targetId}</strong> and <strong>{sourceId}</strong> must be an ID of existing data objects
data_object_replace_content_success_response: Successfully replaced content of data object
data_object_replace_content_summary: Replace content of a data object
data_object_update_by_id_description: |
  Update needs to have the complete data present. <br> You can create/update/delete list entries like properties. <br>  If you want to update only a single field, use the PATCH method.
data_object_update_by_id_success_response: Successfully updated data object
data_object_update_by_id_summary: Update a data object by ID
element_delete_created_response: Successfully created jobRun for deleting element
  and its children
element_delete_description: |
  Deletes a specific element based on the given <strong>{elementType}</strong> and <strong>{id}</strong>. <br> The <strong>{id}</strong> must be an existing element of the provided <strong>{elementType}</strong>. <br> If element is a folder, all child elements will be deleted as well. Elements are moved into the Recycle Bin before deletion.
element_delete_success_response: Successfully deleted element
element_delete_summary: Delete a specific element and its children
element_folder_create_description: |
  Creating a new folder by <strong>{parentId}</strong> and <strong>{elementType}</strong>. <br> The <strong>{parentId}</strong> must be an ID of an existing folder or element. <br>
  For additional body parameters see the schema <strong>FolderData</strong>
element_folder_create_success_response: Successfully created folder
element_folder_create_summary: Create a new element folder
element_get_delete_info_description: |
  Get delete info for a specific element based on the given <strong>{elementType}</strong> and <strong>{id}</strong>. <br> The <strong>{id}</strong> must be an existing ID of an element of the provided <strong>{elementType}</strong>.
element_get_delete_info_success_response: Get delete info for an element
element_get_delete_info_summary: Get delete info of the element by id and element type path parameter
element_get_id_by_path_description: |
  Get the element ID based on the given <strong>{path}</strong> and <strong>{elementType}</strong>. <br> The <strong>{path}</strong> must be a valid path of an existing element with provided <strong>{elementType}</strong>
element_get_id_by_path_success_response: ID of the element
element_get_id_by_path_summary: Get ID of the element by path query parameter and element type path parameter
property_get_collection_for_element_by_type_and_id_description: |
  List all the saved properties of the element. <br>
  Keep in mind  that inherited properties should not be send back in an update request. <br>
  This will result in the loss of the inheritance. <br>
property_get_collection_for_element_by_type_and_id_summary: Get properties for an element based on the element type and the element id
property_get_collection_for_element_by_type_and_id_success_response:  Element Properties data as json
property_get_collection_description: |
  Listing all the predefined properties that are currently stored in the system. <br>
  To list specific properties for a type you can use the <strong>elementType</strong> query parameter.<br>
  You can also created element type specific listings for this, to show in the context of the element. <br>
  The <strong>filter</strong> query parameter is applied on the name of the property. <br>
  Keep in mind that the name is language specific.
property_get_collection_summary: Get all predefined properties. You can filter by type and query
property_get_collection_success_response: Predefined properties filtered based on type and query parameters
property_create_summary: Creating new property with default values
property_create_description: |
  Creating the property with default values. <br>
  <ul>
    <li>Name: New Property</li>
    <li>Key: new_key</li>
    <li>Type: Text</li>
    <li>Element Type: Document (Ctype)</li>
  </ul>
property_create_success_response: Created predefined property with default values
property_delete_summary: Delete property with given id
property_delete_description: |
  Deleting the property with the given <strong>{id}</strong>. <br>
  If the property is used in any element, it will not be deleted.
property_delete_success_response: Successfully deleted property with given id
property_update_summary: Updating a property
property_update_description: |
  Updating the property with the given <strong>{id}</strong>. <br>
  See the full description of updatable fields with the schema <strong>UpdatePredefinedProperty</strong>
property_update_success_response: Updated predefined property
tag_asset_thumbnail_description: List thumbnails for assets like videos and images
tag_assets_description: Asset operations to get/update/create/delete assets
tag_authorization_description: Session-based login via username and password or logout
  and invalidate the session
tag_dataobjects_description: DataObject operations to get/update/create/delete data
  objects
tag_dependencies_description: Get dependencies for a single element
tag_elements_description: Get element properties for a single element based on its
  type and provided parameters
tag_emails_description: Email operations to get/update/create/delete/test emails and
  email blocklist
tag_execution_engine_description: Execution engine operations related to job runs
tag_grid_description: Grid operations
tag_mercure_description: Retrieve JWT token for Mercure hub as cookie
tag_notes_description: Note operations to list/delete notes
tag_properties_description: Property operations to get/update/create/delete properties
tag_role_description: Role Management operations
tag_schedule_description: Get schedules for an element
tag_settings_description: Get System Settings
tag_tags_description: Tag operations to get/list/create/update/delete tags
tag_tags_for_element_description: Tag operations to get tags for an element
tag_translation_description: Get translations either for a single key or multiple
  keys
tag_user_description: User Management operations
tag_versions_description: Versions operations to get/list/publish/delete and cleanup
  versions
tag_workflows_description: Workflows operations to get element workflow details
thumbnail_image_get_collection_description: |
  Get collection of thumbnails for images. <br>
  The thumbnails have to be defined as downloadable in order to be listed in the collection.
thumbnail_image_get_collection_summary: Get collection of thumbnails for images
thumbnail_image_get_collection_success_response: All downloadable image thumbnails
thumbnail_video_get_collection_description: |
    Get collection of all thumbnails for videos.
thumbnail_video_get_collection_summary: Get collection of thumbnails for videos
thumbnail_video_get_collection_success_response: All video thumbnails
note_element_get_collection_summary: Get paginated notes for an element by id
note_element_get_collection_description: |
    Get paginated notes for a specific element by its <strong>{id}</strong>. <br>
    You can use different query parameters to filter the notes
note_element_get_collection_success_response: Paginated notes with total count
note_element_create_summary: Create a new note for element with given id
note_element_create_description: |
    Create a new note for the element with the given <strong>{id}</strong>. <br>
    The note will be created for the current user.
note_element_create_success_response: Created note for element
note_get_collection_description: |
    Get paginated notes. <br>
    You can use different query parameters to filter the notes
note_get_collection_summary: Get paginated notes
note_get_collection_success_response: Paginated notes with total count
note_delete_by_id_summary: Delete note with given id
note_delete_by_id_description: |
    Delete the note with the given <strong>{id}</strong>
note_delete_by_id_success_response: Successfully deleted note
version_asset_download_by_id_description: |
  Download the asset version based on the provided version <strong>{id}</strong>.
version_asset_download_by_id_success_response: Asset version binary file
version_asset_download_by_id_summary: Download asset version by ID
version_cleanup_for_element_by_type_and_id_description: |
  Cleans up all versions for a specific element based on the given <strong>{elementType}</strong> and <strong>{id}</strong>. <br> The <strong>{id}</strong> must be an existing element of the provided <strong>{elementType}</strong>.
version_cleanup_for_element_by_type_and_id_summary: Cleanup all versions for an element
version_cleanup_for_element_by_type_and_id_success_response: IDs of the removed versions
version_delete_by_id_description: |
  Deletes a specific version based on the given <strong>{id}</strong>. <br> The <strong>{id}</strong> must be an id of existing version.
version_delete_by_id_success_response: Successfully deleted version
version_delete_by_id_summary: Delete a specific version
version_get_by_id_description: |
  Retrieves a specific version data based on the given <strong>{id}</strong>. <br> The <strong>{id}</strong> must be an id of existing version.
version_get_by_id_success_response: Successfully retrieved version data as JSON
version_get_by_id_summary: Get a specific version by ID
version_get_collection_for_element_by_type_and_id_description: |
  List all the versions of the element. <br> The <strong>{id}</strong> must be an ID of an existing element of the provided <strong>{elementType}</strong>.
version_get_collection_for_element_by_type_and_id_summary: Get versions for an element
version_get_collection_for_element_by_type_and_id_success_response: Paginated element Versions data as JSON with total count as header param
version_image_stream_by_id_description: |
  Stream the image version thumbnail based on the provided version <strong>{id}</strong>.
version_image_stream_by_id_success_response: Image thumbnail version stream
version_image_stream_by_id_summary: Stream image version thumbnail by ID
version_pdf_stream_by_id_description: |
  Stream the PDF version based on the provided version <strong>{id}</strong>.
version_pdf_stream_by_id_success_response: PDF version stream
version_pdf_stream_by_id_summary: Stream PDF version by ID
version_publish_by_id_description: |
  Publishes a specific version based on the given <strong>{id}</strong>. <br> The <strong>{id}</strong> must be an id of existing version.
version_publish_by_id_summary: Publish a specific version by ID
version_publish_by_id_success_response: ID of the published version
version_update_by_id_description: |
  Updates a version based on the given <strong>{id}</strong>. <br> The <strong>{id}</strong> must be an id of existing version. <br> See the full description of updatable fields with the schema <strong>UpdateVersion</strong>
version_update_by_id_success_response: Successfully updated version
version_update_by_id_summary: Update a version by ID
system_settings_get_description: |
  Get system settings from different providers. <br>
  System settings are public and need no login.
system_settings_get_summary: Get system settings
system_settings_get_success_response: System settings data
schedule_get_collection_for_element_by_type_and_id_description: |
  Get all schedules for a specific element based on the given <strong>{elementType}</strong> and <strong>{id}</strong>. <br>
schedule_get_collection_for_element_by_type_and_id_summary: Get schedules for an element
schedule_get_collection_for_element_by_type_and_id_success_response: List of schedules for element
schedule_create_for_element_by_type_and_id_description: |
  Create a new schedule with default values for the element with the given type <strong>{elementType}</strong> and <strong>{id}</strong>. <br>
  The schedule will be created for the current user.
schedule_create_for_element_by_type_and_id_success_response: Created schedule for element
schedule_create_for_element_by_type_and_id_summary: Create a schedule for element
schedule_update_for_element_by_type_and_id_description: |
    Update schedules for a specific element based on the given <strong>{elementType}</strong> and <strong>{id}</strong>. <br>
    See the full description of updatable fields with the schema <strong>UpdateSchedule</strong>
schedule_update_for_element_by_type_and_id_summary: Update schedules for an element
schedule_update_for_element_by_type_and_id_success_response: List of updated schedules
schedule_delete_by_id_description: |
    Deletes a specific schedule based on the given <strong>{id}</strong>.
schedule_delete_by_id_summary: Delete schedule with given id
schedule_delete_by_id_success_response: Successfully deleted schedule
user_clone_by_id_summary: Clone a specific user.
user_clone_by_id_success_response: Node of the cloned user.
user_create_summary: Create a new user.
user_create_success_response: Node of the new created User.
user_folder_create_summary: Create a new user folder.
user_folder_create_success_response: Node of the new created Folder.
user_get_current_information_summary: Retrieve information's about the current logged in user.
user_get_current_information_success_response: Current user information's.
user_delete_by_id_summary: Delete a specific user.
user_folder_delete_by_id_summary: Delete a specific user folder with all users in this folder.
user_get_by_id_summary: Retrieve a specific user by ID.
user_get_by_id_success_response: Node of the requested user.
user_get_available_permissions_summary: Get all available user permissions.
user_get_available_permissions_success_response: List of available user permissions.
user_reset_password_summary: Sending username to reset password.
user_update_password_by_id_summary: Update password for a User by the User id.
user_update_by_id_summary: Update user by id.
user_update_by_id_success_response: Updated data.
user_get_tree_summary: Get collection of users for tree view.
user_get_tree_success_response: Collection of users including folders for the given parent id.
role_clone_by_id_summary: Clone a specific Role.
role_clone_by_id_success_response: Node of the cloned Role.
role_folder_create_summary: Create a new role folder.
role_folder_create_success_response: Node of the new created Folder
role_create_summary: Create a new role.
role_create_success_response: Node of the new created Role.
role_folder_delete_by_id_summary: Delete a specific folder with all sub roles.
role_delete_by_id_summary: Delete a specific role.
role_get_collection_summary: Get role by id.
role_get_collection_success_response: Role data.
role_get_by_id_summary: Get all available user roles.
role_get_by_id_success_response: List of available user roles.
role_get_tree_summary: Get collection of roles for tree view.
role_get_tree_success_response: Collection of roles including folders for the given parent id.
role_update_by_id_summary: Update role by id.
role_update_by_id_response: Updated data.
workflow_get_details_summary: Get all workflow details of an element
workflow_get_details_description: | 
  Get details of the element workflows based on the given <strong>{elementType}</strong> and <strong>{elementId}</strong>.
workflow_get_details_success_response: Detail data of element workflows
workflow_action_submit_summary: Submit workflow action
workflow_action_submit_description: Submit action based on the workflow name, action name and action type.
workflow_action_submit_success_response: Json encoded name of workflow, name and type of submitted action.